[build-system]
requires = ["setuptools>=74.1.2", "setuptools-scm[toml]>=8.0.0", "cython>=3.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "tamp"
dynamic = ["version"]
description = "Low-memory, DEFLATE-inspired lossless compression library"
readme = "README.md"
requires-python = ">=3.9"
license = "Apache-2.0"
authors = [{name = "Brian Pugh", email = "bnp117@gmail.com"}]
keywords = ["compression", "lossless", "embedded", "deflate"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "cyclopts>=1.0.0",
]

[project.optional-dependencies]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=3.0.0",
    "gitpython>=3.1.31",
    "sphinx-copybutton>=0.5.2",
    "myst-parser[linkify]>=3.0.1",
]
dev = [
    "coverage[toml]>=5.1",
    "pre-commit>=2.16.0",
    "pytest>=7.1.2",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.7.0",
    "black>=23.1.0",
    "belay>=0.21.3",
    "tqdm>=4.65.0",
    "matplotlib>=3.7.4",
    "ipdb>=0.13.13",
    "mpremote>=1.20.0",
    "cython>=0.29.34",
    "pytest-subtests>=0.10.0",
    "numpy>=1.24",
    "pyelftools>=0.32",
    "setuptools>=74.1.2",
]
profile = [
    "line-profiler<5.0.0",
]

[project.urls]
Homepage = "https://github.com/BrianPugh/tamp"
Repository = "https://github.com/BrianPugh/tamp"
Documentation = "https://tamp.readthedocs.io"

[project.scripts]
tamp = "tamp.cli.main:run_app"

[tool.setuptools]
packages = ["tamp"]
include-package-data = true

[tool.setuptools.package-data]
tamp = ["*.so", "*.dll", "*.pyd"]

[tool.setuptools-scm]
write_to = "tamp/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"

[tool.belay]
name = "tamp"
ignore = [
    "__pycache__",
    "*.pyi",
    "*.pyx",
    "*.pxd",
    "*.pyc",
    "*.so",
    "*.html",
    "_c_src/",
    "cli/",
    "*.c",
    "*.h",
]

[tool.belay.group.dev]
optional = true

[tool.belay.group.dev.dependencies]
argparse = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/argparse/argparse.py"
collections = [
    "https://github.com/mattytrentini/micropython-lib/blob/deque-improvements/python-stdlib/collections.deque/collections/deque.py",
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/collections/collections/__init__.py",
]
fnmatch = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/fnmatch/fnmatch.py"
pathlib = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/pathlib/pathlib.py"
shutil = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/shutil/shutil.py"
tempfile = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/tempfile/tempfile.py"
unittest = [
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/unittest/unittest/__init__.py",
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/unittest-discover/unittest/__main__.py"
]
uprofiler = "https://github.com/BrianPugh/micropython-libs/blob/main/lib/uprofiler.py"

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
    "tamp/*_viper.py",
    "tamp/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "def run_app",
    "except ImportError",
]

[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.ruff]
target-version = 'py39'
unfixable = ["UP"]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D205",
    "D401",
    "E402",
    "E501",
    "F401",
    "SIM105",  # Use `contextlib.suppress(ImportError)` instead of try-except-pass
    "SIM115",  # Use context handler for opening files
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "UP018",
]
line-length = 120  # Must agree with Black

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"mpy_bindings/*.py" = [
    "F821",  # Undefined names
]
"tamp/*_viper.py" = [
    "F821",  # Undefined names (e.g. `ptr8`)
]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PGH001",  # use of "eval"
    "N806", # Variable in function should be lowercase; it sometimes makes sense if iterating over class constructors.
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.codespell]
"ignore-words-list" = "ans,fo"

[tool.creosote]
 venvs=[".venv"]
 paths=["tamp"]
 deps-file="pyproject.toml"
 sections=["project.dependencies"]
 exclude-deps =[
   "rich",
 ]
