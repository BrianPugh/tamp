[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=0.21.5", "cython>=3.0.0", "setuptools>=61.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry]
name = "tamp"
version = "0.0.0"  # Do not change, let poetry-dynamic-versioning handle it.
homepage = "https://github.com/BrianPugh/tamp"
repository = "https://github.com/BrianPugh/tamp"
license = "Apache-2.0"
description = ""
authors = ["Brian Pugh"]
readme = "README.rst"
packages = [{include = "tamp"}]
include = ["tamp/*.so", "tamp/*.dll", "tamp/*.pyd"]

[tool.poetry.build]
generate-setup-file = false
script = 'build.py'

[tool.poetry.scripts]
tamp = "tamp.cli.main:run_app"

[tool.poetry.dependencies]
# Be as loose as possible if writing a library.
python = ">=3.8"
typer = ">=0.6.0"

[tool.poetry.group.docs.dependencies]
sphinx = ">=4.5.0"
sphinx_rtd_theme = ">=1.0.0"
gitpython = ">=3.1.31"
sphinx-copybutton = ">=0.5.2"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = ">=5.1"}
pre_commit = ">=2.16.0"
pytest = ">=7.1.2"
pytest-cov = ">=3.0.0"
pytest-mock = ">=3.7.0"
black = ">=23.1.0"
belay = ">=0.21.3"
tqdm = ">=4.65.0"
matplotlib = ">=3.7.1"
ipdb = ">=0.13.13"
mpremote = ">=1.20.0"
cython = ">=0.29.34"
pytest-subtests = ">=0.10.0"

[tool.poetry.group.profile]
optional = true

[tool.poetry.group.profile.dependencies]
line-profiler = "<4.0.0"

[tool.belay]
name = "tamp"
ignore = [
    "__pycache__",
    "*.pyi",
    "*.pyx",
    "*.pxd",
    "*.pyc",
    "*.so",
    "*.html",
    "_c_src/",
    "cli/",
    "*.c",
    "*.h",
]

[tool.belay.group.dev]
optional = true

[tool.belay.group.dev.dependencies]
argparse = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/argparse/argparse.py"
collections = [
    "https://github.com/mattytrentini/micropython-lib/blob/deque-improvements/python-stdlib/collections.deque/collections/deque.py",
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/collections/collections/__init__.py",
]
fnmatch = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/fnmatch/fnmatch.py"
pathlib = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/pathlib/pathlib.py"
shutil = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/shutil/shutil.py"
tempfile = "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/tempfile/tempfile.py"
unittest = [
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/unittest/unittest/__init__.py",
    "https://github.com/micropython/micropython-lib/blob/master/python-stdlib/unittest-discover/unittest/__main__.py"
]
uprofiler = "https://github.com/BrianPugh/micropython-libs/blob/main/lib/uprofiler.py"

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
    "tamp/*_viper.py",
    "tamp/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "def run_app",
    "except ImportError",
]

[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.ruff]
target-version = 'py38'
unfixable = ["UP"]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "B905",  # zip strict=True; remove once python <3.10 support is dropped.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D205",
    "D401",
    "E402",
    "E501",
    "F401",
    "SIM105",  # Use `contextlib.suppress(ImportError)` instead of try-except-pass
    "SIM115",  # Use context handler for opening files
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "UP018",
]
line-length = 120  # Must agree with Black

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tamp/*_viper.py" = [
    "F821",  # Undefined names (e.g. `ptr8`)
]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PGH001",  # use of "eval"
    "N806", # Variable in function should be lowercase; it sometimes makes sense if iterating over class constructors.
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.codespell]
"ignore-words-list" = "ans,fo"
